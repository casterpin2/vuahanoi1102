import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

public class WorkScheduler {
    public static void main(String[] args) throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");

        List<WorkEntry> workData = Arrays.asList(
                new WorkEntry("A", sdf.parse("03-03-2025"), sdf.parse("05-03-2025"), 11.2),
               // new WorkEntry("A", sdf.parse("03-03-2025"), sdf.parse("04-03-2025"), 16),
                new WorkEntry("A", sdf.parse("05-03-2025"), sdf.parse("06-03-2025"), 10),
                new WorkEntry("B", sdf.parse("04-03-2025"), sdf.parse("06-03-2025"), 15)
        );

        List<BreakEntry> breakData = Arrays.asList(
                new BreakEntry("A", sdf.parse("06-03-2025"), sdf.parse("06-03-2025"), 8)
        );

        Set<Date> holidays = new HashSet<>(Arrays.asList(
                sdf.parse("07-03-2025") // Giả sử 07-03-2025 là ngày lễ
        ));

        Map<String, TreeMap<Date, Double>> result = allocateWorkHours(workData, breakData, holidays);

        // In kết quả
        for (Map.Entry<String, TreeMap<Date, Double>> entry : result.entrySet()) {
            System.out.println("PIC: " + entry.getKey());
            for (Map.Entry<Date, Double> dateEntry : entry.getValue().entrySet()) {
                System.out.println("  Date: " + sdf.format(dateEntry.getKey()) + ", Total Hours: " + dateEntry.getValue());
            }
        }
    }

    public static Map<String, TreeMap<Date, Double>> allocateWorkHours(
            List<WorkEntry> workData, List<BreakEntry> breakData, Set<Date> holidays) {

        Map<String, TreeMap<Date, Double>> workHoursMap = new HashMap<>();
        Map<String, Map<Date, Integer>> breakMap = new HashMap<>();

        // **1. Chuyển breakData thành Map để truy xuất nhanh**
        for (BreakEntry b : breakData) {
            breakMap.putIfAbsent(b.pic, new HashMap<>());
            Date date = b.startDate;
            while (!date.after(b.endDate)) {
                breakMap.get(b.pic).put(date, b.breakHoursPerDay);
                date = addDays(date, 1);
            }
        }

        // **2. Gộp giờ làm vào workHoursMap**
        for (WorkEntry work : workData) {
            workHoursMap.putIfAbsent(work.pic, new TreeMap<>());
            TreeMap<Date, Double> dateHours = workHoursMap.get(work.pic);

            List<Date> workDays = getDateRange(work.dateFrom, work.dateTo, holidays);
            if (workDays.isEmpty()) continue;

            double dailyHours = work.hours / workDays.size();
            double remainder = work.hours - (dailyHours * workDays.size());

            for (Date date : workDays) {
                double extra = 0;
                if (remainder > 0) {
                    extra = Math.min(1.0, remainder); // Chỉ cộng phần dư nhỏ hơn hoặc bằng 1
                    remainder -= extra;
                }
                dateHours.put(date, dateHours.getOrDefault(date, 0.0) + dailyHours + extra);

            }
        }

        // **3. Xử lý giờ nghỉ và dồn giờ dư**
        for (String pic : workHoursMap.keySet()) {
            TreeMap<Date, Double> dateHours = workHoursMap.get(pic);
            Queue<Map.Entry<Date, Double>> overflowQueue = new LinkedList<>();

            for (Map.Entry<Date, Double> entry : new TreeMap<>(dateHours).entrySet()) {
                Date date = entry.getKey();
                double workHours = entry.getValue();

                // **Nếu có giờ nghỉ, giảm số giờ làm**
                int breakHours = breakMap.getOrDefault(pic, Collections.emptyMap()).getOrDefault(date, 0);
                double adjustedHours = Math.min(workHours, 8 - breakHours);

                // **Nếu có giờ dư, đưa vào queue để xử lý sau**
                if (workHours > adjustedHours) {
                    overflowQueue.add(new AbstractMap.SimpleEntry<>(addDays(date, 1), workHours - adjustedHours));
                }

                // **Cập nhật số giờ làm sau khi trừ giờ nghỉ**
                dateHours.put(date, adjustedHours);
            }

            // **4. Dồn giờ dư sang ngày tiếp theo hợp lệ**
            while (!overflowQueue.isEmpty()) {
                Map.Entry<Date, Double> overflow = overflowQueue.poll();
                Date nextDate = overflow.getKey();
                double remainingHours = overflow.getValue();

                while (remainingHours > 0) {
                    // Nếu ngày tiếp theo là ngày nghỉ lễ, bỏ qua
                    while (holidays.contains(nextDate)) {
                        nextDate = addDays(nextDate, 1);
                    }

                    // Kiểm tra giờ nghỉ trong ngày tiếp theo
                    int breakHoursNextDay = breakMap.getOrDefault(pic, Collections.emptyMap()).getOrDefault(nextDate, 0);
                    double maxCanWork = 8 - breakHoursNextDay;

                    double availableHours = dateHours.getOrDefault(nextDate, 0.0);
                    double maxCanAdd = Math.min(maxCanWork - availableHours, remainingHours);

                    if (maxCanAdd > 0) {
                        dateHours.put(nextDate, availableHours + maxCanAdd);
                        remainingHours -= maxCanAdd;
                    }

                    if (remainingHours > 0) {
                        nextDate = addDays(nextDate, 1);
                    }
                }
            }
        }

        return workHoursMap;
    }

    // **Hàm hỗ trợ**
    public static Date addDays(Date date, int days) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        cal.add(Calendar.DAY_OF_MONTH, days);
        return cal.getTime();
    }

    public static List<Date> getDateRange(Date start, Date end, Set<Date> holidays) {
        List<Date> dates = new ArrayList<>();
        Calendar cal = Calendar.getInstance();
        cal.setTime(start);

        while (!cal.getTime().after(end)) {
            if (!holidays.contains(cal.getTime())) {
                dates.add(cal.getTime());
            }
            cal.add(Calendar.DAY_OF_MONTH, 1);
        }

        return dates;
    }

    static class WorkEntry {
        String pic;
        Date dateFrom, dateTo;
        double hours;

        public WorkEntry(String pic, Date dateFrom, Date dateTo, double hours) {
            this.pic = pic;
            this.dateFrom = dateFrom;
            this.dateTo = dateTo;
            this.hours = hours;
        }
    }

    static class BreakEntry {
        String pic;
        Date startDate, endDate;
        int breakHoursPerDay;

        public BreakEntry(String pic, Date startDate, Date endDate, int breakHoursPerDay) {
            this.pic = pic;
            this.startDate = startDate;
            this.endDate = endDate;
            this.breakHoursPerDay = breakHoursPerDay;
        }
    }
}
